// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

/// Dart API for using ErrorCode enum
class ErrorsFfi {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  ErrorsFfi(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  ErrorsFfi.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  void tagion_error_text(
    ffi.Pointer<ffi.Char> msg,
    ffi.Pointer<ffi.Uint64> msg_len,
  ) {
    return _tagion_error_text(
      msg,
      msg_len,
    );
  }

  late final _tagion_error_textPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Uint64>)>>('tagion_error_text');
  late final _tagion_error_text = _tagion_error_textPtr.asFunction<
      void Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Uint64>)>();

  void tagion_clear_error() {
    return _tagion_clear_error();
  }

  late final _tagion_clear_errorPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('tagion_clear_error');
  late final _tagion_clear_error =
      _tagion_clear_errorPtr.asFunction<void Function()>();
}

abstract class TagionErrorCode {
  static const int TAGION_ERROR_NONE = 0;
  static const int TAGION_ERROR_EXCEPTION = -1;
  static const int TAGION_ERROR_ERROR = -2;
}
